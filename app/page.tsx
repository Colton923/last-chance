import styles from 'styles/App.module.scss'
import Image, { StaticImageData } from 'next/image'
import beer from 'public/images/beer.jpg'
import beerGarden3 from 'public/images/beerGarden.jpg'
import sunday2 from 'public/images/sunday.jpg'
import taps from 'public/images/taps.jpg'
import niceOutsidePhoto from 'public/images/outside_photo.webp'
import slots from 'public/images/slots.jpg'
import { ReactNode } from 'react'
import Text from 'components/Text/Text'
import Flex from 'components/Flex/Flex'
import Space from 'components/Space/Space'

export default function Index() {
  const BeerSVG = () => {
    return (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        x="0px"
        y="0px"
        width="10rem"
        height="5rem"
        viewBox="0 0 50 50"
        fill="#ffffff"
        style={{ padding: '1rem' }}
      >
        <path d="M 6 5 A 1.0001 1.0001 0 0 0 5.0058594 6.1054688 L 8.8183594 42.314453 C 8.9779516 43.832817 10.273526 45 11.800781 45 L 38.199219 45 C 39.726474 45 41.024002 43.832817 41.183594 42.314453 L 44.994141 6.1054688 A 1.0001 1.0001 0 0 0 44 5 L 6 5 z M 7.1113281 7 L 42.888672 7 L 40.189453 32.654297 L 40.189453 32.589844 C 39.879453 35.579844 36.94 38 33 38 L 25 38 L 17 38 C 13.06 38 10.120547 35.579844 9.8105469 32.589844 L 9.8105469 32.640625 L 7.1113281 7 z M 28.978516 20.9375 A 1.0001 1.0001 0 0 0 28.054688 21.544922 L 26.144531 26 L 24 26 L 24 23 A 1.0001 1.0001 0 0 0 23 22 L 15 22 A 1.0001 1.0001 0 0 0 14 23 L 14 26 L 11.119141 26 L 11.800781 32.410156 C 12.010781 34.460156 14.25 36 17 36 L 33 36 C 35.75 36 37.989219 34.460156 38.199219 32.410156 L 38.880859 26 L 36.710938 26 L 36.980469 25.369141 A 1.0001 1.0001 0 0 0 36.455078 24.056641 L 29.367188 21.019531 A 1.0001 1.0001 0 0 0 28.978516 20.9375 z M 29.5 23.251953 L 34.748047 25.5 L 32.498047 30.75 L 27.25 28.5 L 29.5 23.251953 z M 16 24 L 22 24 L 22 30 L 16 30 L 16 24 z"></path>
      </svg>
    )
  }

  const EatSVG = () => {
    return (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        x="0px"
        y="0px"
        width="10rem"
        height="5rem"
        viewBox="0 0 64 64"
        fill="#ffffff"
        style={{ padding: '1rem' }}
      >
        <path d="M 53.328125 4.308594 C 52.820313 4.347656 52.316406 4.515625 51.871094 4.816406 L 38.296875 14.015625 C 36.378906 15.3125 35.609375 17.734375 36.421875 19.90625 L 37.777344 23.527344 L 32.714844 28.148438 L 10.714844 6.148438 C 10.304688 5.742188 9.71875 5.550781 9.148438 5.644531 C 8.578125 5.738281 8.082031 6.101563 7.824219 6.617188 C 4.546875 13.175781 5.828125 21.058594 11.011719 26.242188 L 22.363281 37.597656 L 8.839844 49.949219 C 7.820313 50.875 7.242188 52.148438 7.210938 53.527344 C 7.179688 54.90625 7.699219 56.199219 8.675781 57.175781 L 9.828125 58.328125 C 10.773438 59.273438 12.023438 59.792969 13.359375 59.792969 C 13.394531 59.792969 13.4375 59.789063 13.472656 59.789063 C 14.851563 59.757813 16.121094 59.179688 17.050781 58.160156 L 31.988281 41.804688 L 47.378906 58.191406 C 48.316406 59.1875 49.582031 59.746094 50.949219 59.765625 L 51.027344 59.765625 C 52.363281 59.765625 53.613281 59.25 54.5625 58.300781 L 55.789063 57.074219 C 56.757813 56.109375 57.277344 54.820313 57.253906 53.453125 C 57.230469 52.089844 56.667969 50.820313 55.671875 49.886719 L 38.917969 34.21875 L 43.46875 29.234375 L 46.96875 30.605469 C 47.570313 30.839844 48.191406 30.953125 48.804688 30.953125 C 50.417969 30.953125 51.972656 30.164063 52.925781 28.757813 L 62.183594 15.132813 C 62.988281 13.945313 62.835938 12.34375 61.820313 11.328125 L 55.671875 5.179688 C 55.039063 4.542969 54.175781 4.246094 53.328125 4.308594 Z M 53.648438 6.304688 C 53.875 6.328125 54.089844 6.425781 54.261719 6.59375 L 55.214844 7.546875 L 45.3125 17.449219 C 44.921875 17.839844 44.921875 18.46875 45.3125 18.859375 C 45.507813 19.054688 45.765625 19.15625 46.019531 19.15625 C 46.277344 19.15625 46.535156 19.054688 46.730469 18.859375 L 56.625 8.960938 L 58.042969 10.375 L 48.140625 20.277344 C 47.75 20.667969 47.75 21.296875 48.140625 21.6875 C 48.335938 21.882813 48.589844 21.984375 48.847656 21.984375 C 49.105469 21.984375 49.359375 21.882813 49.554688 21.6875 L 59.453125 11.789063 L 60.40625 12.742188 C 60.746094 13.082031 60.796875 13.617188 60.527344 14.011719 L 51.273438 27.636719 C 50.480469 28.800781 49.011719 29.257813 47.699219 28.746094 L 43.554688 27.125 C 43.550781 27.121094 43.542969 27.121094 43.539063 27.121094 C 43.460938 27.089844 43.378906 27.085938 43.296875 27.078125 C 43.246094 27.070313 43.199219 27.050781 43.15625 27.054688 C 43.09375 27.058594 43.035156 27.082031 42.976563 27.09375 C 42.910156 27.109375 42.84375 27.117188 42.78125 27.140625 C 42.742188 27.160156 42.710938 27.195313 42.671875 27.21875 C 42.601563 27.265625 42.527344 27.304688 42.46875 27.371094 C 42.460938 27.375 42.457031 27.375 42.453125 27.378906 L 37.457031 32.847656 L 36.777344 32.214844 L 34.128906 29.5625 L 39.625 24.546875 C 39.625 24.546875 39.625 24.546875 39.628906 24.542969 C 39.707031 24.46875 39.765625 24.378906 39.816406 24.285156 C 39.828125 24.265625 39.847656 24.246094 39.859375 24.226563 C 39.890625 24.15625 39.898438 24.074219 39.914063 23.996094 C 39.921875 23.949219 39.945313 23.902344 39.949219 23.855469 C 39.949219 23.824219 39.9375 23.792969 39.933594 23.765625 C 39.929688 23.664063 39.921875 23.5625 39.886719 23.46875 C 39.886719 23.464844 39.886719 23.464844 39.886719 23.460938 L 38.292969 19.203125 C 37.804688 17.902344 38.269531 16.449219 39.421875 15.671875 L 52.992188 6.476563 C 53.191406 6.339844 53.421875 6.285156 53.648438 6.304688 Z M 9.492188 7.757813 L 34.398438 32.660156 L 25.613281 37.054688 C 25.230469 37.246094 24.765625 37.171875 24.460938 36.867188 L 23.359375 35.765625 L 24.773438 34.351563 C 25.164063 33.960938 25.164063 33.328125 24.773438 32.9375 C 24.382813 32.546875 23.75 32.546875 23.359375 32.9375 L 21.945313 34.351563 L 19.824219 32.230469 L 21.238281 30.8125 C 21.628906 30.421875 21.628906 29.789063 21.238281 29.402344 C 20.847656 29.007813 20.214844 29.007813 19.824219 29.402344 L 18.410156 30.816406 L 16.285156 28.691406 L 17.703125 27.28125 C 18.09375 26.886719 18.09375 26.257813 17.703125 25.863281 C 17.308594 25.472656 16.679688 25.472656 16.285156 25.863281 L 14.875 27.28125 L 12.75 25.15625 L 14.167969 23.746094 C 14.558594 23.351563 14.558594 22.722656 14.167969 22.328125 C 13.773438 21.9375 13.144531 21.9375 12.75 22.328125 L 11.402344 23.683594 C 10.746094 22.878906 10.179688 22.023438 9.710938 21.125 L 10.628906 20.207031 C 11.023438 19.816406 11.023438 19.1875 10.628906 18.796875 C 10.238281 18.402344 9.609375 18.402344 9.21875 18.796875 L 8.863281 19.148438 C 7.589844 15.496094 7.75 11.40625 9.492188 7.757813 Z M 35.910156 34.140625 L 54.304688 51.347656 C 54.902344 51.90625 55.242188 52.667969 55.253906 53.488281 C 55.269531 54.308594 54.957031 55.082031 54.375 55.660156 L 53.148438 56.890625 C 52.570313 57.46875 51.785156 57.785156 50.980469 57.765625 C 50.160156 57.753906 49.402344 57.417969 48.839844 56.824219 L 30.214844 36.992188 Z M 28.34375 37.925781 L 30.613281 40.34375 L 15.578125 56.8125 C 15.019531 57.421875 14.257813 57.769531 13.429688 57.789063 C 12.597656 57.800781 11.824219 57.496094 11.238281 56.910156 L 10.089844 55.761719 C 9.503906 55.175781 9.191406 54.398438 9.210938 53.570313 C 9.230469 52.742188 9.578125 51.980469 10.1875 51.421875 L 23.921875 38.882813 C 24.734375 39.253906 25.683594 39.257813 26.511719 38.84375 Z M 41.746094 42.25 C 41.492188 42.25 41.234375 42.351563 41.039063 42.546875 C 40.648438 42.9375 40.648438 43.570313 41.039063 43.960938 L 42.703125 45.625 C 42.898438 45.816406 43.152344 45.917969 43.410156 45.917969 C 43.667969 45.917969 43.921875 45.816406 44.117188 45.625 C 44.507813 45.234375 44.507813 44.601563 44.117188 44.210938 L 42.453125 42.546875 C 42.257813 42.351563 42 42.25 41.746094 42.25 Z M 46.457031 46.964844 C 46.203125 46.964844 45.945313 47.0625 45.75 47.257813 C 45.359375 47.648438 45.359375 48.28125 45.75 48.671875 L 51.539063 54.460938 C 51.734375 54.65625 51.988281 54.753906 52.246094 54.753906 C 52.503906 54.753906 52.757813 54.65625 52.953125 54.460938 C 53.34375 54.070313 53.34375 53.4375 52.953125 53.046875 L 47.164063 47.257813 C 46.96875 47.0625 46.710938 46.964844 46.457031 46.964844 Z"></path>
      </svg>
    )
  }

  const SlotsSVG = () => {
    return (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        x="0px"
        y="0px"
        width="10rem"
        height="5rem"
        viewBox="0 0 30 30"
        fill="#ffffff"
        style={{ padding: '1rem' }}
      >
        <path d="M 15 1 A 1 1 0 0 0 14 2 A 1 1 0 0 0 15 3 A 1 1 0 0 0 16 2 A 1 1 0 0 0 15 1 z M 11.5 1.9375 A 1 1 0 0 0 10.5 2.9375 A 1 1 0 0 0 11.5 3.9375 A 1 1 0 0 0 12.5 2.9375 A 1 1 0 0 0 11.5 1.9375 z M 18.5 1.9375 A 1 1 0 0 0 17.5 2.9375 A 1 1 0 0 0 18.5 3.9375 A 1 1 0 0 0 19.5 2.9375 A 1 1 0 0 0 18.5 1.9375 z M 8.9375 4.5 A 1 1 0 0 0 7.9375 5.5 A 1 1 0 0 0 8.9375 6.5 A 1 1 0 0 0 9.9375 5.5 A 1 1 0 0 0 8.9375 4.5 z M 21.0625 4.5 A 1 1 0 0 0 20.0625 5.5 A 1 1 0 0 0 21.0625 6.5 A 1 1 0 0 0 22.0625 5.5 A 1 1 0 0 0 21.0625 4.5 z M 15 6 C 13.816 6 12.776172 6.7858281 12.451172 7.9238281 L 11 13 L 19 13 L 17.548828 7.9238281 C 17.223828 6.7858281 16.184 6 15 6 z M 8 8 A 1 1 0 0 0 7 9 A 1 1 0 0 0 8 10 A 1 1 0 0 0 9 9 A 1 1 0 0 0 8 8 z M 22 8 A 1 1 0 0 0 21 9 A 1 1 0 0 0 22 10 A 1 1 0 0 0 23 9 A 1 1 0 0 0 22 8 z M 4 15 A 1.0001 1.0001 0 1 0 4 17 L 26 17 A 1.0001 1.0001 0 1 0 26 15 L 4 15 z M 3.4570312 19 L 5.546875 27 L 7.4667969 27 L 8.7792969 22.099609 L 8.8808594 22.099609 L 10.216797 27 L 12.123047 27 L 14.212891 19 L 12.117188 19 L 11.070312 24.306641 L 10.970703 24.306641 L 9.6445312 19 L 8.015625 19 L 6.734375 24.306641 L 6.6347656 24.306641 L 5.5703125 19 L 3.4570312 19 z M 15.632812 19 L 15.632812 27 L 17.667969 27 L 17.667969 19 L 15.632812 19 z M 19.552734 19 L 19.552734 27 L 21.480469 27 L 21.480469 22.453125 L 21.585938 22.453125 L 24.929688 27 L 26.542969 27 L 26.542969 19 L 24.613281 19 L 24.613281 23.501953 L 24.507812 23.501953 L 21.175781 19 L 19.552734 19 z"></path>
      </svg>
    )
  }

  type TBanner = {
    bg: string
    svg: ReactNode
    lineOne?: string
    lineTwo?: string
    innerImage:
      | {
          alt: string
          src: StaticImageData
        }[]
      | undefined
  }

  const Banner = ({ bg, svg, lineOne, lineTwo, innerImage }: TBanner) => {
    return (
      <Flex dir="column" justify="center" align="center" width={'full'}>
        <Space dir="x" size="xl" />
        <Flex dir="column" justify="center" align="center" bg={bg} width={'full'}>
          <Space dir="x" size="xxs" />
          <Flex dir={'row'} justify={'center'} align={'center'} width={'full'}>
            <div className={styles.whiteLine} />
            {svg}
            <div className={styles.whiteLine} />
          </Flex>
          <Flex
            dir="column"
            justify="center"
            align="center"
            wrap={'wrap'}
            width={'full'}
          >
            <Text color="white" size="lg" weight="bold" textTransform="uppercase">
              {lineOne}
            </Text>
            <Text color="white" size="lg" weight="bold" textTransform="uppercase">
              {lineTwo}
            </Text>
            {innerImage && (
              <Flex
                dir="row"
                justify="center"
                align="center"
                width="full"
                overflow="x"
                className={styles.scrollContainer} // Add a new class for styling
              >
                <Flex
                  dir="row"
                  justify="start"
                  align="center"
                  wrap="nowrap"
                  className={styles.innerImageContainer}
                >
                  {innerImage?.map((image, index) => (
                    <Image
                      key={index}
                      src={image.src.src}
                      alt={image.alt}
                      height={400}
                      width={300}
                      quality={100}
                      className={styles.innerImage}
                    />
                  ))}
                </Flex>
              </Flex>
            )}
          </Flex>
          <Space dir="x" size="sm" />
          <div className={styles.whiteLine} />
          <Space dir="x" size="sm" />
        </Flex>
        <Space dir="x" size="xl" />
      </Flex>
    )
  }

  const Banners = () => {
    const banners = [
      {
        bg: 'rgba(182, 32, 27, 1)',
        svg: <BeerSVG />,
        lineOne: 'Coldest beer in town,',
        lineTwo: 'Cheapest all around!',
      },
      {
        bg: 'rgba(0, 0, 0, 1)',
        svg: <EatSVG />,
        lineOne: 'All day breakfast,',
        lineTwo: 'Lunch and dinner!',
        innerImage: [
          {
            alt: 'Nice Outside',
            src: niceOutsidePhoto,
          },
          {
            alt: 'Sunday',
            src: sunday2,
          },
        ],
      },
      {
        bg: 'rgba(182, 32, 27, 1)',
        svg: <SlotsSVG />,
        lineOne: 'Play our slots,',
        lineTwo: 'And win a lot!',
        innerImage: [
          {
            alt: 'Slots',
            src: slots,
          },
          {
            alt: 'Taps',
            src: taps,
          },
        ],
      },
    ]

    return (
      <Flex dir="column" justify="center" align="center" width={'full'}>
        <Space dir="x" size="xl" />
        {banners.map((banner, index) => (
          <Banner
            key={index}
            bg={banner.bg}
            svg={banner.svg}
            lineOne={banner.lineOne}
            lineTwo={banner.lineTwo}
            innerImage={banner.innerImage}
          />
        ))}
      </Flex>
    )
  }

  return (
    <Flex dir="column" justify="center" align="center">
      <Image
        src={beer}
        alt="Beer"
        className={styles.backgroundPhotoOne}
        height={960}
        width={710}
        quality={100}
      />
      <Banners />
    </Flex>
  )
}
